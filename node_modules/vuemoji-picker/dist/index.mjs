var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};

// src/components/VuemojiPicker.ts
import { defineComponent, Vue2 } from "vue-demi";
import Picker from "emoji-picker-element/picker";

// src/utils/h-demi.ts
import { h as hDemi, isVue2 } from "vue-demi";
var adaptOnsV3 = (ons) => {
  if (!ons)
    return null;
  return Object.entries(ons).reduce((ret, [key, handler]) => {
    key = key.charAt(0).toUpperCase() + key.slice(1);
    key = `on${key}`;
    return __spreadProps(__spreadValues({}, ret), { [key]: handler });
  }, {});
};
var h = (type, options = {}, chidren) => {
  if (isVue2)
    return hDemi(type, options, chidren);
  const _a = options, { props, domProps, on } = _a, extraOptions = __objRest(_a, ["props", "domProps", "on"]);
  let ons = adaptOnsV3(on);
  const params = __spreadValues(__spreadValues(__spreadValues(__spreadValues({}, extraOptions), props), domProps), ons);
  return hDemi(type, params, chidren);
};
var h_demi_default = h;

// src/utils/dark-mode.ts
function isDarkMode() {
  return window.matchMedia && window.matchMedia("(prefers-color-scheme: dark)").matches;
}

// src/utils/to-dashes.ts
function toDashes(key) {
  return key.replace(/[A-Z]/g, (m) => "-" + m.toLowerCase());
}

// src/components/VuemojiPicker.ts
if (Vue2) {
  Vue2.config.ignoredElements.push("emoji-picker");
}
var VuemojiPicker_default = defineComponent({
  props: {
    isDark: {
      type: Boolean,
      required: false,
      default: isDarkMode()
    },
    skinToneEmoji: String,
    customEmoji: Array,
    dataSource: String,
    locale: String,
    customCategorySorting: Function,
    i18n: Object,
    pickerStyle: Object
  },
  emits: ["emojiClick", "skinToneChange"],
  data: () => ({
    picker: new Picker()
  }),
  methods: {
    handleClick(event) {
      this.$emit("emojiClick", event.detail);
    },
    handleSkinToneChange(event) {
      this.$emit("skinToneChange", event.detail);
    },
    updatePickerProps() {
      const {
        skinToneEmoji,
        dataSource,
        locale,
        customEmoji,
        i18n,
        customCategorySorting,
        isDark
      } = this.$props;
      if (skinToneEmoji) {
        this.picker.skinToneEmoji = skinToneEmoji;
      }
      if (dataSource) {
        this.picker.dataSource = dataSource;
      }
      if (locale) {
        this.picker.locale = locale;
      }
      if (customEmoji) {
        this.picker.customEmoji = customEmoji;
      }
      if (i18n) {
        this.picker.i18n = i18n;
      }
      if (customCategorySorting) {
        this.picker.customCategorySorting = customCategorySorting;
      }
      this.picker.classList.toggle("dark", isDark);
      this.picker.classList.toggle("light", !isDark);
      this.updatePickerStyle();
    },
    updatePickerStyle() {
      if (this.pickerStyle && typeof this.pickerStyle === "object") {
        Object.keys(this.pickerStyle).forEach((key) => {
          var _a, _b;
          if (key === "height" && ((_a = this.pickerStyle) == null ? void 0 : _a.height)) {
            this.picker.style.setProperty("height", this.pickerStyle.height);
          } else if (key === "width" && ((_b = this.pickerStyle) == null ? void 0 : _b.width)) {
            this.picker.style.setProperty("width", this.pickerStyle.width);
          } else {
            this.picker.style.setProperty(`--${toDashes(key)}`, this.pickerStyle[key]);
          }
        });
      }
    }
  },
  mounted() {
    const root = this.$refs.root;
    this.updatePickerProps();
    root.appendChild(this.picker);
    this.picker.addEventListener("emoji-click", this.handleClick);
    this.picker.addEventListener("skin-tone-change", this.handleSkinToneChange);
  },
  beforeUnmount() {
    this.picker.removeEventListener("emoji-click", this.handleClick);
    this.picker.removeEventListener("skin-tone-change", this.handleSkinToneChange);
  },
  watch: {
    $props: {
      handler() {
        this.updatePickerProps();
      },
      deep: true
    }
  },
  render() {
    return h_demi_default("div", {
      ref: "root"
    });
  }
});

// src/composables/useDatabase.ts
import Database from "emoji-picker-element/database";
function useDatabase() {
  return new Database();
}
export {
  VuemojiPicker_default as VuemojiPicker,
  useDatabase
};
