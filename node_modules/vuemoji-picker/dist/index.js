var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  VuemojiPicker: () => VuemojiPicker_default,
  useDatabase: () => useDatabase
});

// src/components/VuemojiPicker.ts
var import_vue_demi2 = require("vue-demi");
var import_picker = __toESM(require("emoji-picker-element/picker"));

// src/utils/h-demi.ts
var import_vue_demi = require("vue-demi");
var adaptOnsV3 = (ons) => {
  if (!ons)
    return null;
  return Object.entries(ons).reduce((ret, [key, handler]) => {
    key = key.charAt(0).toUpperCase() + key.slice(1);
    key = `on${key}`;
    return __spreadProps(__spreadValues({}, ret), { [key]: handler });
  }, {});
};
var h = (type, options = {}, chidren) => {
  if (import_vue_demi.isVue2)
    return (0, import_vue_demi.h)(type, options, chidren);
  const _a = options, { props, domProps, on } = _a, extraOptions = __objRest(_a, ["props", "domProps", "on"]);
  let ons = adaptOnsV3(on);
  const params = __spreadValues(__spreadValues(__spreadValues(__spreadValues({}, extraOptions), props), domProps), ons);
  return (0, import_vue_demi.h)(type, params, chidren);
};
var h_demi_default = h;

// src/utils/dark-mode.ts
function isDarkMode() {
  return window.matchMedia && window.matchMedia("(prefers-color-scheme: dark)").matches;
}

// src/utils/to-dashes.ts
function toDashes(key) {
  return key.replace(/[A-Z]/g, (m) => "-" + m.toLowerCase());
}

// src/components/VuemojiPicker.ts
if (import_vue_demi2.Vue2) {
  import_vue_demi2.Vue2.config.ignoredElements.push("emoji-picker");
}
var VuemojiPicker_default = (0, import_vue_demi2.defineComponent)({
  props: {
    isDark: {
      type: Boolean,
      required: false,
      default: isDarkMode()
    },
    skinToneEmoji: String,
    customEmoji: Array,
    dataSource: String,
    locale: String,
    customCategorySorting: Function,
    i18n: Object,
    pickerStyle: Object
  },
  emits: ["emojiClick", "skinToneChange"],
  data: () => ({
    picker: new import_picker.default()
  }),
  methods: {
    handleClick(event) {
      this.$emit("emojiClick", event.detail);
    },
    handleSkinToneChange(event) {
      this.$emit("skinToneChange", event.detail);
    },
    updatePickerProps() {
      const {
        skinToneEmoji,
        dataSource,
        locale,
        customEmoji,
        i18n,
        customCategorySorting,
        isDark
      } = this.$props;
      if (skinToneEmoji) {
        this.picker.skinToneEmoji = skinToneEmoji;
      }
      if (dataSource) {
        this.picker.dataSource = dataSource;
      }
      if (locale) {
        this.picker.locale = locale;
      }
      if (customEmoji) {
        this.picker.customEmoji = customEmoji;
      }
      if (i18n) {
        this.picker.i18n = i18n;
      }
      if (customCategorySorting) {
        this.picker.customCategorySorting = customCategorySorting;
      }
      this.picker.classList.toggle("dark", isDark);
      this.picker.classList.toggle("light", !isDark);
      this.updatePickerStyle();
    },
    updatePickerStyle() {
      if (this.pickerStyle && typeof this.pickerStyle === "object") {
        Object.keys(this.pickerStyle).forEach((key) => {
          var _a, _b;
          if (key === "height" && ((_a = this.pickerStyle) == null ? void 0 : _a.height)) {
            this.picker.style.setProperty("height", this.pickerStyle.height);
          } else if (key === "width" && ((_b = this.pickerStyle) == null ? void 0 : _b.width)) {
            this.picker.style.setProperty("width", this.pickerStyle.width);
          } else {
            this.picker.style.setProperty(`--${toDashes(key)}`, this.pickerStyle[key]);
          }
        });
      }
    }
  },
  mounted() {
    const root = this.$refs.root;
    this.updatePickerProps();
    root.appendChild(this.picker);
    this.picker.addEventListener("emoji-click", this.handleClick);
    this.picker.addEventListener("skin-tone-change", this.handleSkinToneChange);
  },
  beforeUnmount() {
    this.picker.removeEventListener("emoji-click", this.handleClick);
    this.picker.removeEventListener("skin-tone-change", this.handleSkinToneChange);
  },
  watch: {
    $props: {
      handler() {
        this.updatePickerProps();
      },
      deep: true
    }
  },
  render() {
    return h_demi_default("div", {
      ref: "root"
    });
  }
});

// src/composables/useDatabase.ts
var import_database = __toESM(require("emoji-picker-element/database"));
function useDatabase() {
  return new import_database.default();
}
module.exports = __toCommonJS(src_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  VuemojiPicker,
  useDatabase
});
